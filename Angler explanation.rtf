{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Bold;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 getAngle Method:
\f1\b0  Switched from calculating cosine to using atan2, which directly gives the angle of the vector formed by the two points with respect to the horizontal axis. This is often more intuitive and easier to use in many applications.\
\

\f0\b angleToGSR Method: 
\f1\b0 Added use of std::abs for absolute value computation and used std::clamp to limit the GSR value within a specified range, improving robustness.\
\

\f0\b constantCalculator Method:
\f1\b0  Added a check to return a quiet NaN (std::numeric_limits<float>::quiet_NaN()) if the input angle is zero, which is a more robust way to handle division by zero errors.\
\

\f0\b leftRightDeterminer Method:
\f1\b0  This method now uses a simplified cross product approach to determine the relative direction (left or right) based on the positions of pointA and pointB. This approach is often used in computational geometry to determine the orientation of points.}